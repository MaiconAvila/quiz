{"version":3,"sources":["App.js","index.js"],"names":["Container","styled","div","ScreenQuiz","props","screen","Title","h1","Paragraph","p","Button","button","ContainerLabel","Label","label","Radio","clickedLabel","IntoRadio","Error","App","state","questions","question","alternatives","currectAnswer","count","answer","error","screenFinish","timer","renderInitial","second","setState","handleClick","length","renderScreenInitial","onClick","handleOptions","map","alternative","index","key","renderQuestions","Array","from","slice","quest","renderResult","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bab0ff5b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n  width: 100%;\n  background: #7159c1;\n`;\n\nconst ScreenQuiz = styled.div`\n  display: flex;\n  justify-content: ${props => (props.screen ? 'space-between' : 'center' )};\n  align-items: center;\n  flex-direction: column;\n  max-width: 600px;\n  padding: ${props => (props.screen ? '5rem' : '.5rem')};\n  width: 100%;\n  height: 60vh;\n  background: #fff;\n  border-radius: 5px;\n  box-shadow: 0px 5px 100px -20px #000;\n  transform: perspective(1px) translateZ(0);\n\n  &:hover {\n    animation-name: animation-float, animation;\n    animation-duration: .3s, 1.5s;\n    animation-delay: 0s, .3s;\n    animation-timing-function: ease-out, ease-in-out;\n    animation-iteration-count: 1, infinite;\n    animation-fill-mode: forwards;\n    animation-direction: normal, alternate;\n  }\n\n  @keyframes animation {\n    0% {\n      transform: translateY(-8px);\n    }\n    50% {\n      transform: translateY(-4px);\n    }\n    100% {\n      transform: translateY(-8px);\n    }\n  }\n\n  @keyframes animation-float {\n    100% {\n      transform: translateY(-8px);\n    }\n  }\n`;\n\nconst Title = styled.h1`\n  font-size: 2.5rem;\n  color: #7159c1;\n  margin-bottom: .5rem;\n  text-align: center;\n  max-width: 90%;\n`;\n\nconst Paragraph = styled.p`\n  font-size: 1.5rem;\n`;\n\nconst Button = styled.button`\n  font-size: 1.2rem;\n  font-weight: bold;\n  width: 40%;\n  height: 3rem;\n  color: #fff;\n  border: none;\n  cursor: pointer;\n  background: #7159c1;\n  border-radius: 5px;\n  box-shadow: 0px 3px 15px 0px #666;\n`;\n\nconst ContainerLabel = styled.div`\n  display: flex;\n  align-items: flex-start;\n  flex-direction: column;\n  margin: 0 auto .5rem auto;\n`;\n\nconst Label = styled.label`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Radio = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 15px;\n  height: 15px;\n  border-radius: 7.5px;\n  border: .5px solid black;\n  margin: 0 .5rem 0 0;\n  background: ${props => (props.clickedLabel ? '#7159c1' : '#fff')};\n`;\n\nconst IntoRadio = styled.div`\n  width: 5px;\n  height: 5px;\n  border-radius: 3px;\n  background: #fff;\n`;\n\nconst Error = styled.div`\n  top: 22rem;\n  color: red;\n  position: absolute;\n  font-weight: bold;\n`;\n\nexport default class App extends Component {\n  state = {\n    questions: [\n      {\n        question: \"What is the capital of Canada?\",\n        alternatives: [\n          {\n            label: \"São Paulo\",\n            currectAnswer: false,\n          },\n          {\n            label: \"Madrid\",\n            currectAnswer: false,\n          },\n          {\n            label: \"Ottawa\",\n            currectAnswer: true,\n          },\n          {\n            label: \"Cairo\",\n            currectAnswer: false,\n          },\n        ],\n      },\n      {\n        question: \"What is the capital of Sweeden?\",\n        alternatives: [\n          {\n            label: \"Tokyio\",\n            currectAnswer: false,\n          },\n          {\n            label: \"Estocolmo\",\n            currectAnswer: true,\n          },\n          {\n            label: \"Moscow\",\n            currectAnswer: false,\n          },\n          {\n            label: \"Havana\",\n            currectAnswer: false,\n          },\n        ],\n      },\n      {\n        question: \"What is the capital of Germany?\",\n        alternatives: [\n          {\n            label: \"Berlim\",\n            currectAnswer: true,\n          },\n          {\n            label: \"Paris\",\n            currectAnswer: false,\n          },\n          {\n            label: \"Lyon\",\n            currectAnswer: false,\n          },\n          {\n            label: \"Montevidéu\",\n            currectAnswer: false,\n          },\n        ],\n      },\n      {\n        question: \"What is the capital of Argentina?\",\n        alternatives: [\n          {\n            label: \"Munique\",\n            currectAnswer: false,\n          },\n          {\n            label: \"Kiev\",\n            currectAnswer: false,\n          },\n          {\n            label: \"New York\",\n            currectAnswer: false,\n          },\n          {\n            label: \"Bueno Aires\",\n            currectAnswer: true,\n          },\n        ],\n      },\n      {\n        question: \"What is the capital of Norway?\",\n        alternatives: [\n          {\n            label: \"Beijing\",\n            currectAnswer: true,\n          },\n          {\n            label: \"Oslo\",\n            currectAnswer: false,\n          },\n          {\n            label: \"Sidney\",\n            currectAnswer: false,\n          },\n          {\n            label: \"Seattle\",\n            currectAnswer: false,\n          },\n        ],\n      }\n    ],\n    screen: true,\n    count: 0,\n    clickedLabel: {},\n    answer: 0,\n    error: false,\n    screenFinish: false,\n    timer: null\n  };\n\n  renderInitial = () => {\n    const { second, count } = this.state;\n\n    this.setState({ \n      screen: false,\n      count: 1,\n      timer: 3\n    });\n    // this.counting();\n  }\n\n  // componentDidMount() {\n  //   this.counting();\n  // }\n\n  // counting = () => {\n  //   const { count, questions, clickedLabel, answer, second } = this.state;\n    \n  //   if(this.state.timer !== null && this.state.count <= 5) {\n  //     this.counter = setInterval(() => {\n\n  //       clearInterval(this.counter);\n  //       this.counting();\n        \n  //       if(this.state.timer === 0) {\n  //         this.setState({\n  //           count: count + 1,\n  //           answer: clickedLabel.currectAnswer ? answer + 1 : answer,\n  //           error: false,\n  //           timer: 3\n  //         })\n\n  //       clearInterval(this.counter)\n  //       this.counting();\n\n  //       } else {\n  //         this.setState({\n  //           timer: this.state.timer - 1,\n  //         })\n\n  //       // clearInterval(this.counter)\n  //       // this.counting();\n  //       }\n\n  //       // console.log(this.state.timer)\n  //     }, 1000)\n  //   }\n  //   console.log(questions.length, count, questions.length - 1)\n\n  // }\n\n  handleClick = () => {\n    const { count, questions, clickedLabel, answer, second } = this.state;\n\n    // clearInterval(this.counter)\n    // this.counting();\n\n    if(questions.length >= count && clickedLabel.label) {\n      this.setState({\n        count: count + 1,\n        clickedLabel: {},\n        answer: clickedLabel.currectAnswer ? answer + 1 : answer,\n        error: false,\n        timer: 3\n      });\n    } else {\n      this.setState({\n        count: count,\n        error: true,\n      });\n    }\n    \n    if(this.state.count >= 5) {\n      // clearInterval(this.counter)\n      this.setState({\n        screenFinish: true,\n        clickedLabel: {}\n      });\n    }\n  }\n\n  renderScreenInitial = () => {\n    return (\n      <Container>\n        <ScreenQuiz screen={this.state.screen}>\n          <Title>Country Quiz</Title>\n          <Paragraph>Click to start</Paragraph>\n          <Button \n            onClick={this.renderInitial}>\n            Begin\n          </Button>\n        </ScreenQuiz>\n      </Container>\n    )\n  };\n\n  handleOptions = (alternatives) => {\n    const { clickedLabel } = this.state;\n\n    return alternatives.map((alternative, index) => {\n      return (\n        <Label \n          key={index} \n          onClick={() => this.setState({\n          clickedLabel: alternative,\n          error: false\n          })}>\n          <Radio \n            clickedLabel={clickedLabel.label === alternative.label}>\n            <IntoRadio></IntoRadio>\n          </Radio>\n          <Paragraph>{alternative.label}</Paragraph>\n        </Label>\n      )\n    })\n  }\n\n  renderQuestions = () => {\n    const { questions, count, error, timer } = this.state;\n\n    const NewQuestions = Array.from(questions);\n    const removeQuestions = NewQuestions.slice(count - 1, count);\n\n    return removeQuestions.map((quest, index) => (\n      <Container key={index}>\n        <ScreenQuiz>\n          {/* <p>{timer}</p> */}\n          <Title>{quest.question}</Title>\n          <ContainerLabel>\n            {this.handleOptions(quest.alternatives)}\n          </ContainerLabel>\n          <Button\n            onClick={this.handleClick}>\n            Submit\n          </Button>\n          {error && <Error>Please check an alternative.</Error>}\n        </ScreenQuiz>\n      </Container>\n    ));\n  };\n\n  renderResult = () => {\n    const { answer, screenFinish } = this.state;\n\n    return (\n      <Container>\n        <ScreenQuiz screen={screenFinish}>\n          <Title>you got {answer} out of 5 questions</Title>\n          <Button \n            onClick={() => this.setState({ \n            count: 0, \n            screenFinish: false, \n            screen: true, \n            answer: 0,\n            timer: 0,\n            error: false,\n            })}>\n            Play again\n          </Button>\n        </ScreenQuiz>\n      </Container>\n    );\n  };\n\n  render() {\n    const { screenFinish, screen } = this.state;\n\n    return (\n      !screenFinish \n      ? <>\n          {screen \n          ? this.renderScreenInitial() \n          : this.renderQuestions()}\n        </> \n      : this.renderResult()\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}